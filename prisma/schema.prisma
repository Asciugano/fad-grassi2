// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id         String   @id @default(cuid())
  username   String
  email      String   @unique
  password   String
  role       UserRole
  created_at DateTime @default(now())

  coursesCreated Course[]     @relation("CourseTeacher")
  enrollments    Enrollment[]
  submissions    Submission[]

  accounts Account[]
  sessions Session[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Course {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())

  teacher   User   @relation("CourseTeacher", fields: [teacherId], references: [id])
  teacherId String

  enrollments Enrollment[]
  homeworks   HomeWork[]
  news        News[]
}

model News {
  id         String   @id @default(cuid())
  title      String
  content    String?  @db.Text
  files      Json?
  created_at DateTime @default(now())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model HomeWork {
  id         String    @id @default(cuid())
  title      String
  content    String?   @db.Text
  files      Json?
  deadline   DateTime?
  created_at DateTime  @default(now())

  status HomeworkStatus @default(MANCANTE)
  grade  Float?

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  submissions Submission[]
}

model Submission {
  id         String   @id @default(cuid())
  content    String?  @db.Text
  files      Json?
  created_at DateTime @default(now())

  userId     String
  homeworkId String

  user     User     @relation(fields: [userId], references: [id])
  homework HomeWork @relation(fields: [homeworkId], references: [id])
}

enum UserRole {
  STUDENTE
  INSEGNANTE
  ADMIN
}

enum HomeworkStatus {
  MANCANTE
  RITARDO
  CONSEGNATO
}
